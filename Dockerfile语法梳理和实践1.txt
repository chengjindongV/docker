FROM scratch 制作base image
FROM centos 使用base image

尽量使用官方的image作为base image！

LABEL maintainer = "xiaoquwl@gmail.com" 作者
LABEL version = "1.0"
LABEL description = "This is description"
相当于代码里面的注释

RUN 运行一些命令，比如安装一些软件

使用注意：运行一条RUN，image就会多一层，为了美观，复杂的RUN请用反斜线换行！
避免无用分层，合并多条命令成一行

RUN yum update && yum install -y yum \
python-dev #反斜线换行

RUN apt-get update && apt-get install -y perl \
pwgen --no-install-recommends && rm -rf \
/var/lib/apt/lists/*  # 注意清理cache


RUN /bin/bash -c 'source $HOME/.bashrc;echo $HOME'


WORKDIR 设定当前工作目录
WORKDIR /root

WORKDIR /test #如果没有会自动创建test目录
WORKDIR demo
RUN pwd #输出结果应该是 /test/demo

--RUN pwd 打印出来当前目录

注意：用WORKDIR，不要用 RUN cd，尽量使用绝对目录

ADD and COPY 都是把本地的文件添加到docker image里面

ADD hello / 添加hello文件到image根目录

ADD test.tar.gz / #添加到根目录并解压

WORKDIR /root #指定工作目录是根目录下面的root
ADD hello test/  # /root/test/hello

WORKDIR /root

ADD or Copy
大部分情况下，COPY优于ADD！
ADD除了COPY还有额外的解压功能
添加远程文件/目录请使用curl或者wget！

ENV  声明环境变量 常量

ENV MYSQL_VERSION 5.6 #设置常量
RUN apt-get install -y mysql-server="{MYSQL_VERSION}" \
&& rm -rf /var/lib/apt/lists/*  #引用常量

VOLUME and EXPOSE 存储和网络

CMD and ENTRYPOINT


COPY hello test/

************************************
RUN: 执行命令并创建新的Image layer
CMD: 设置容器启动后默认执行的命令和参数
ENTRYPOINT: 设置容器启动时运行的命令

Shell格式
RUN apt-get install -y vim
CMD echo "hello docker"
ENTRYPOINT echo "hello docker"

Exec 格式
RUN["apt-get","install","-y","vim"]
CMD["/bin/echo","hello docker"]
ENTRYPOINT["/bin/echo","hello docker"]

